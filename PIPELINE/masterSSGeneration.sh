# cd ${1}${2}
# pwd

# echo ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# #Organelles-am-2.ce takes the trajectory analysis file, and the colocalisation distance (8.0 (video) or 1.6 (sim) in this case)

# ../../organelles-am-2.ce ${3} ${7}
# #Gives: filename.txt, the adjacency matrix for all colocalised mitos in that frame
# #       filename-single.txt all singleton mitos present over time between frame 1 and i, as long as they haven't become colocalised. 
# #       filename-single-new.txt all new singletons that have appeared in frame i
# #       filename-spec.txt all new, novel colocalisations from that frame
# cd ..
# cd ..

# #Makes storage directories and splits trajectory information up by frame\
# echo filesplitter
# ./filesplittermain.sh ${1} ${2} ${3} ${6}

# #Splits trajectory data up into trajectories
# echo trajectorysplitter
# ./trajectorysplitter.sh ${1} ${2} ${3}

# #This takes the 5th input from .sh, but parses as the 3rd args into R
# #Warnings may appear due to NAs in data frames, generated by empty, or only single line trajectories coming out of simulation script.
# #These may take quite a while for the null model runs that have a lot of very short trajectories.
# echo traj lengths
# ./lengthOfTrajectories-AllTrajectories.r ${1} ${2} ${5}

# #copies historical and new adjecency matrix data for each frame (generated by organelles.c) into its own directory
# #The copy function will break if your frame number is very large. 500 frames broke this (as .txt files n =2000)
./makeandcopyToHistoricalAndNewPairs.sh ${1} ${2}


# #Mathematica script genrating networks, histograms and network stat outputs-if editing mamthematica notebook edit in this .sh file too.
# ./summaryStatisticsGenerationForVideoData.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7}
# #This edited script allows generation of all basic summary stats with and without the input of historical singleton mitochondria data being input per frame. This is the only script where non-singletons and singleton data is handled in the same script. The other network stat scripts are split up accordingly.
# ./summaryStatisticsGenerationForVideoDatawithSingletons.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7}


# #this file neatens up many outputs from the mathematica file. 
# #This takes the 6th input from this .sh, but parses as the 3rd args into NBCfilesmerging.sh 
# ./NBCfilesmerging.sh ${1} ${2} ${6}
# ./NBCfilesmergingwithSingletons.sh ${1} ${2} ${6}
 
# #calculates the average number of mitos from each frame and SD
# ./numberOfMitos.R ${1} ${2}

# #Deals with 'spiky' dataframes, and generates largest size of connected components data set
# ./importRealData.R ${1} ${2}
# ./importRealData-withSingletons.R ${1} ${2}


# #turn SCC to proportion
# #takes a long time for for sim
# #As some of the networks are too massive
# echo beginproportionsCCs
# ./proportionOfCCs.R ${1} ${2}
# echo finished without singletons starting with singletons
# ./proportionOfCCswithSingletons.R ${1} ${2}
# echo finishedproportionsCCs

# #Histogram and log table generation
# #For some of the simulation files these histograms won't generate because you're missing the first few frames of data as a network has not yet built up
# ./summaryStatisticsHists.R ${1} ${2} ${6}

# #Calculates association time between two individual mitos for all mitos in video, and first checks -spec.txt have content, if not adds NAs in. Otherwise empty files hinder association time count
# ./emptyFileCheck.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# ./associationTime.r ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}

 
# #Calculates angle of motion for all mitos in video
# echo running angles
# ./scriptAngles.r ${1} ${2}
# echo finished angles

# #Calculates speed of motion for all mitos in video- nb:uses framelength and resolution
# echo running speeds
# ./speedsOfMitochondriaForVids.r ${1} ${2} ${3} ${4} ${5} ${6}

# echo finished speeds
# echo finish

# #Calculates shortest inter-mitochondrial distance between each mito in the cell and every other mito. Also CoV.
# echo running inter mito distance
# ./distancesBetweenMitochondria.r ${1} ${2} ${3} ${4} ${5}
# echo finished intermito distance

# #Calculates and outputs degree values of nodes walked over 10 times by random walker. Also outputs means of these 200x walks. 
# #Followed by storing degree values for all steps of all frames in one file. Means table stays in main video directory. 
# #Look for MeanDropsBetweenStepsForAllFramesIn...csv file and walkerDegreeOutput folder
# echo started walker stat
# ./MetricAutomatedWalkerStat.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# ./walkerDegreeFilesMove.sh ${1} ${2}
# echo finished walker stat

# #Calculating convex hulls- exports 'maps' of convex hull areas too- for experimental data this will overall mimick cell shape
# echo started convex hulls
# ./convexHullWorkAutomated.R ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8} 
# echo finished convex hulls

# #Maximum minimum distances across the network compared wih 200x erdos renyi random network generations, from which max min is taken and compared mxmin of the network
# #Date stamps as for networks with many connected components this takes a very long time, erdos renyi nets for hundereds of connected components take ages.
# echo started max min dist 
# date
# ./MaximumMinimumDistanceNormalisedAutomated.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# date
# echo finished max min dist

# echo started percolation jumps 
# ./percolationJumpsRedoAutomated.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# echo finished percolation jumps

# echo started average connected neighbours
# ./averageNumberOfConnectedNeighbours.R ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# echo finished average connected neighbours

# echo started network efficiency 
# ./NetworkEfficiency.sh ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}
# echo finished network efficiency 

# #novel scripts for statistics collection over time- splits regular stats into stats for each time point- for supplementary
# echo started stat collection over time.

# #generates summaryStatsAccumulatesOverAllFramesInterMitoDist.csv
# ./distancesBetweenMitochondriaForIntervals-allintervals.R ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}

# # Generates speedMeansOverAllFrames
# ./speedsOfMitochondriaForVidsForIntervals-AllIntervals.R ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}

# #ConvexHullSummStatsAsRateFromFrame1to
# ./convexHullWorkForIntervals-earlymidpoint.R ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}

# Genrates associationtimesIntrvls and associationtimeIntervalsMeanIn1to*
./associationTimeForIntervals-AllIntervals.r ${1} ${2} ${3} ${4} ${5} ${6} ${7} ${8}

echo finished stat collection over time.
